<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jasonpbecker</title><link href="http://blog.jsonbecker.com/" rel="alternate"></link><link href="http://blog.jsonbecker.com/feeds/misc.atom.xml" rel="self"></link><id>http://blog.jsonbecker.com/</id><updated>2013-06-20T00:00:00-04:00</updated><entry><title>Economic Policy Institute is Wrong</title><link href="http://blog.jsonbecker.com/2013/06/economic-policy-institute-is-wrong.html" rel="alternate"></link><updated>2013-06-20T00:00:00-04:00</updated><author><name>Jason P. Becker</name></author><id>tag:blog.jsonbecker.com,2013-06-20:2013/06/economic-policy-institute-is-wrong.html</id><summary type="html">&lt;p&gt;The &lt;a href="http://www.epi.org/"&gt;Economic Policy Institute&lt;/a&gt; has release a &lt;a href="http://www.epi.org/files/2013/ib366-rhode-islands-hybrid-pension-plan.pdf"&gt;short issue brief&lt;/a&gt; on the Rhode Island Retirement Security Act (RIRSA) by &lt;a href="https://twitter.com/rhiltnsmth"&gt;Robert Hiltonsmith&lt;/a&gt; that manages to get all of the details right but the big picture entirely wrong.&lt;/p&gt;
&lt;p&gt;The EPI Issue Brief details the differences between the retirement system for state workers before and after the passage of RIRSA as accurately and clearly as I have ever seen. Mr. Hiltonsmith has done a notable job explaining the differences between the new system and the old system.&lt;/p&gt;
&lt;p&gt;The brief, unfortunately, fails by engaging in two common fallacies to support its broader conclusions. The first is the &lt;a href="http://en.wikipedia.org/wiki/Straw_man"&gt;straw man fallacy&lt;/a&gt;. Mr. Hiltonsmith takes a limited set of the objectives of the entire RIRSA legislation and says defined contribution plans do not meet those objectives. That is true, but ignores the other objectives it does accomplish which were also part of the motivation behind RIRSA. The second is &lt;a href="http://en.wikipedia.org/wiki/Circular_reasoning"&gt;circular reasoning&lt;/a&gt;. In this case, Mr. Hiltonsmith states that the reason for a low funding ratio is because the state did not put 100% of its paper liability into the pension fund. This is a tautology and not in dispute and should not be trumpeted as a conclusion of analysis.&lt;/p&gt;
&lt;p&gt;Here are his three main points that he believes makes RIRSA a bad policy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The defined contribution plan does not save the state money from its annual pension contributions.&lt;/li&gt;
&lt;li&gt;The defined contribution plan is likely to earn lower returns and therefore result in lower benefits for retirees.&lt;/li&gt;
&lt;li&gt;The defined contribution plan does not solve the low funding ratio of the pension plan which exists because law makers did not make required contributions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, the defined contribution portion of RIRSA was not in place to do any of these three things. The purpose of including a defined contribution plan in the new state pension system is to create stability in annual budget allocations and avoid locking the government into promises it has demonstrated it fails to keep. Defined benefit plans require the state to change pension contributions when there are market fluctuations and leads to anti-cyclical costs, where the state is forced to put substantially more resources into pensions when revenues are lowest and spending on social welfare is most important. The defined contribution plan keeps the payments required by the state consistent and highly predictable. This is far preferable from a budget perspective. &lt;/p&gt;
&lt;p&gt;It is unfortunate that there are lower returns to defined contribution plans which may lead to a decrease in overall benefits. It is my opinion that the unions in Rhode Island should be pushing for a substantially better match on the defined contribution portion of their plan that more closely resembles private sector match rates. This could more than alleviate the difference in benefits while maintaining the predictability, for budgeting purposes, of the defined contribution plan. I doubt this policy would have much hope of passing while Rhode Island slowly crawls out of a deep recession, but it is certainly a reasonable matter for future legislatures.&lt;/p&gt;
&lt;p&gt;There are only two ways to decrease the current pension fund shortfalls: increase payments to the fund or decrease benefits. There is no structural magic sauce to get around this. Structural changes in the pension system are aimed at reducing the likelihood that the state will reproduce its current situation, with liabilities well outstripping funds. It is true that the "savings" largely came from cutting benefits. I have not heard anyone claim otherwise. The only alternative was to put a big lump sum into the pension fund. That clearly was not a part of RIRSA.&lt;/p&gt;
&lt;p&gt;It is absurd to judge RIRSA on the ability of defined contribution plans to achieve policy objectives that are unrelated to the purpose of this structural change.&lt;/p&gt;
&lt;p&gt;Perhaps the most troubling conclusion of this brief was that, &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The shortfall in Rhode Island’s pension plan for public employees is largely due not to overly generous benefits, but to the failure of state and local government employers to pay their required share of pensions’ cost.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I read that and expected to see evidence of skipped payments or a discussion of overly ambitious expectations for investment returns, etc. Instead, it seems that this conclusion is based simply on the fact that the benefits in Rhode Island were not deemed outrageously large, and therefore Rhode Island should just pay the liability hole. The "failure" here is predicated entirely on the idea that the pensions as offered should be met, period, whatever the cost to the government. This is the "required share". Which, of course, is technically true without a change in the law, but feels disingenuous. It is essentially a wholesale agreement with the union interpretation of the state pension system as an immutable contract. The courts will likely resolve whether or not this is true. My objection is that Mr. Hiltonsmith makes a definitive statement on this rationale without describing it. In such a lucid description of how the retirement system has changed, it seems this could only be intentional omission intended to support a predetermined conclusion rather than illuminate the unconvinced.&lt;/p&gt;
&lt;p&gt;Mr. Hiltonsmith also claims that, "Over the long term, RIRSA may cost the state upwards of $15 million a year in additional contributions while providing a smaller benefit for the average full-career worker." I am not 100% certain, but based on his use of the normal cost &lt;sup id="fnref:normal cost"&gt;&lt;a class="footnote-ref" href="#fn:normal cost" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; to do these calculations, it appears this conclusion is drawn only based on the marginal contributions to current employees. In other words, if we &lt;em&gt;completely ignore&lt;/em&gt; the existing liability, the new plan cost the state more money marginally while potentially decreasing benefits for employees. It is my opinion that Mr. Hiltonsmith is intentionally creating the perception that RIRSA costs more than the current plan while providing fewer benefits. Again, this is true for future liabilities, but ignores that RIRSA also dramatically decreased the unfunded liabilities through cutting existing retiree benefits. So the overall cost for the act is far less, while the marginal cost was increased with the objective of decreasing the instability in government appropriations.&lt;/p&gt;
&lt;p&gt;We can have a serious debate about whether there is value in the state goals of a defined contribution plan. In my view, the purpose of switching to this structure is about: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Portability of plans for more mobile workers, potentially serving to attract younger and more highly skilled employees&lt;/li&gt;
&lt;li&gt;Stability in government expenditures on retiree benefits from year to year that are less susceptible to market forces. This includes avoiding the temptation to reduce payments when there are strong market returns as well as the crushing difficulty of increasing payments when the market (and almost certainly government receipts) are down.&lt;/li&gt;
&lt;li&gt;Insulating workers from a government that perpetually writes checks they can cash, as was the case with the current system.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This paper does not address any of these objectives or others I might have forgotten. In essence, the brief looks at only one subset of the perceived costs of this structural change, but it is far from a comprehensive analysis of the potential universe of both costs and benefits. In fact, it fails to even address the most commonly cited benefits. That is why I view it as heavily biased and flawed, even if I might draw similar ultimate conclusions from a more thorough analysis.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:normal cost"&gt;
&lt;p&gt;Definition: Active participants earn new benefits each year. Actuaries call that the normal cost. The normal cost is always reflected in the cash and accounting cost of the plan. &lt;a href="http://www.actuary.org/pdf/pension/fundamentals_0704.pdf"&gt;Source&lt;/a&gt; In other words, the normal cost only looks at the new benefits added to the liability, not the existing liability.&amp;#160;&lt;a class="footnote-backref" href="#fnref:normal cost" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Calculating Age in R</title><link href="http://blog.jsonbecker.com/2013/06/calculating-age-in-r.html" rel="alternate"></link><updated>2013-06-12T00:00:00-04:00</updated><author><name>Jason P. Becker</name></author><id>tag:blog.jsonbecker.com,2013-06-12:2013/06/calculating-age-in-r.html</id><summary type="html">&lt;p&gt;A few months back I wrote some code to calculate age from a date of birth and arbitrary end date. It is not a real tricky task, but it is certainly one that comes up often when doing research on individual-level data.&lt;/p&gt;
&lt;p&gt;I was a bit surprised to only find bits and pieces of code and advice on how to best go about this task. After reading through some old R-help and Stack Overflow responses on various ways to do date math in R, this is the function I wrote &lt;sup id="fnref:wrote"&gt;&lt;a class="footnote-ref" href="#fn:wrote" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;age_calc &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;dob&lt;span class="p"&gt;,&lt;/span&gt; enddate&lt;span class="o"&gt;=&lt;/span&gt;Sys.Date&lt;span class="p"&gt;(),&lt;/span&gt; units&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;months&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;inherits&lt;span class="p"&gt;(&lt;/span&gt;dob&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;inherits&lt;span class="p"&gt;(&lt;/span&gt;enddate&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    stop&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Both dob and enddate must be Date class objects&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  start &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; as.POSIXlt&lt;span class="p"&gt;(&lt;/span&gt;dob&lt;span class="p"&gt;)&lt;/span&gt;
  end &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; as.POSIXlt&lt;span class="p"&gt;(&lt;/span&gt;enddate&lt;span class="p"&gt;)&lt;/span&gt;

  years &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; end&lt;span class="o"&gt;$&lt;/span&gt;year &lt;span class="o"&gt;-&lt;/span&gt; start&lt;span class="o"&gt;$&lt;/span&gt;year
  &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;units&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;years&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    result &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; ifelse&lt;span class="p"&gt;((&lt;/span&gt;end&lt;span class="o"&gt;$&lt;/span&gt;mon &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; start&lt;span class="o"&gt;$&lt;/span&gt;mon&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; 
                      &lt;span class="p"&gt;((&lt;/span&gt;end&lt;span class="o"&gt;$&lt;/span&gt;mon &lt;span class="o"&gt;==&lt;/span&gt; start&lt;span class="o"&gt;$&lt;/span&gt;mon&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;end&lt;span class="o"&gt;$&lt;/span&gt;mday &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; start&lt;span class="o"&gt;$&lt;/span&gt;mday&lt;span class="p"&gt;)),&lt;/span&gt;
                      years &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; years&lt;span class="p"&gt;)&lt;/span&gt;    
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;units&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;months&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    months &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;years&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;
    result &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; months &lt;span class="o"&gt;+&lt;/span&gt; start&lt;span class="o"&gt;$&lt;/span&gt;mon
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;units&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;days&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    result &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; difftime&lt;span class="p"&gt;(&lt;/span&gt;end&lt;span class="p"&gt;,&lt;/span&gt; start&lt;span class="p"&gt;,&lt;/span&gt; units&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;days&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="kr"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    stop&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unrecognized units. Please choose years, months, or days.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;result&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A few notes on proper usage and the choices I made in writing this function: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The parameters &lt;code&gt;dob&lt;/code&gt; and &lt;code&gt;enddate&lt;/code&gt; expect data that is already in one of the various classes that minimally inherits the base class &lt;code&gt;Date&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;This function takes advantage of the way that R treats vectors, so both &lt;code&gt;dob&lt;/code&gt; and &lt;code&gt;enddate&lt;/code&gt; can be a single or multi-element vector. For example &lt;code&gt;enddate&lt;/code&gt; is a single date, as is the default, then the function will return a vector that calculates the difference between &lt;code&gt;dob&lt;/code&gt; and that single date for each element in &lt;code&gt;dob&lt;/code&gt;. If &lt;code&gt;dob&lt;/code&gt; and &lt;code&gt;enddate&lt;/code&gt; are both vectors with n&amp;gt;1, then the returned vector will contain the &lt;a href="http://heather.cs.ucdavis.edu/~matloff/r.old.html#elementwise"&gt;element-wise&lt;/a&gt; difference between &lt;code&gt;dob&lt;/code&gt; and &lt;code&gt;enddate&lt;/code&gt;. When the vectors are of different sizes, the shorter vector will be repeated over until it reaches the same length as the longer vector. This is known as &lt;a href="http://cran.r-project.org/doc/manuals/R-intro.html#The-recycling-rule"&gt;recycling&lt;/a&gt;, and it is the default behavior in R.&lt;/li&gt;
&lt;li&gt;This function always returns an integer. Calculating age in years will never return, say, 26.2. Instead, it assumes that the correct behavior for age calculations is something like a &lt;code&gt;floor&lt;/code&gt; function. For examle, the function will only return 27 if &lt;code&gt;enddate&lt;/code&gt; is minimally your 27th birthday. Up until that day you are considered 26. The same is true for age in months.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is probably the first custom function in almost 3 years using R that I wrote to be truly generalizable. I was inspired by three factors. First, this is a truly frequent task that I will have to apply to many data sets in the future that I don't want to have to revisit. Second, a professional acquaintance, &lt;a href="http://jaredknowles.com/"&gt;Jared Knowles&lt;/a&gt;, is putting together a CRAN package with various convenience functions for folks who are new to R and using it to analyze education data &lt;sup id="fnref:eeptools"&gt;&lt;a class="footnote-ref" href="#fn:eeptools" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. This seemed like an appropriate addition to that package, so I wanted to write it to that standard. In fact, it was my first (and to date, only) submitted and accepted pull request on Github. Third, it is a tiny, simple function so it was easy to wrap my head around and write it well. I will let you be the judge of my success or failure &lt;sup id="fnref:inspiration"&gt;&lt;a class="footnote-ref" href="#fn:inspiration" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:wrote"&gt;
&lt;p&gt;I originally used &lt;code&gt;Sys.time()&lt;/code&gt; not realizing there was a &lt;code&gt;Sys.Date()&lt;/code&gt; function. Thanks to Jared Knowles for that edit in preparation for a CRAN check.&amp;#160;&lt;a class="footnote-backref" href="#fnref:wrote" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:eeptools"&gt;
&lt;p&gt;Check out &lt;a href="https://github.com/jknowles/eeptools"&gt;eeptools&lt;/a&gt; on Github.&amp;#160;&lt;a class="footnote-backref" href="#fnref:eeptools" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:inspiration"&gt;
&lt;p&gt;Thanks to &lt;a href="http://mcfromnz.wordpress.com/2013/06/12/updated-age-calculation-function/"&gt;Matt's Stats n Stuff&lt;/a&gt; for getting me to write this post. When I saw another age calculation function pop up on the r-bloggers feed I immediately thought of this function. Matt pointed out that it was quite hard to Google for age calculations in R, lamenting that Google doesn't meaningfully crawl Github where I linked to find my code. So this post is mostly about providing some help to less experience R folks who are frantically Googling as both Matt and I did when faced with this need.&amp;#160;&lt;a class="footnote-backref" href="#fnref:inspiration" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Linear Thinking</title><link href="http://blog.jsonbecker.com/2013/06/linear-thinking.html" rel="alternate"></link><updated>2013-06-02T00:00:00-04:00</updated><author><name>Jason P. Becker</name></author><id>tag:blog.jsonbecker.com,2013-06-02:2013/06/linear-thinking.html</id><summary type="html">&lt;p&gt;Apple will be revealing new details for both of its major operating systems at WWDC on June 10, 2013. The focus of much speculation has been how Apple will improve multi-tasking and inter-app communication in iOS7. As batteries have grown, CPUs have become increasingly powerful, and the application &lt;a href="http://blog.jsonbecker.com/2012/11/frictionless.html"&gt;ecosystem&lt;/a&gt; has matured &lt;sup id="fnref:viticci"&gt;&lt;a class="footnote-ref" href="#fn:viticci" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, the iOS sandboxing model has felt increasingly limiting and outdated.&lt;/p&gt;
&lt;p&gt;I think that there is a simple change that could dramatically increase the effectiveness of multitasking on iOS by re-examining how application switching works.&lt;/p&gt;
&lt;p&gt;Scrolling through a long list of applications, either through the basement shelf or via the four-finger gesture on an iPad, is both slow and lacking in contextual cues. In a simple case where I am working with two applications simultaneously, how do I switch between them? The list of open applications always places the current application in the first position. The previously used application sits in the second position. The first time I want to change to another application this is not so bad. I move to the "right" on the list to progress forward into the next application &lt;sup id="fnref:next"&gt;&lt;a class="footnote-ref" href="#fn:next" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;
&lt;p&gt;The trouble comes when I want to return to where I was just working. The most natural mental model for this switch is to move "left" in the list. I moved "right" to get here and millions of years of evolution has taught me the the "undo button" for moving right is to move left &lt;sup id="fnref:inform7"&gt;&lt;a class="footnote-ref" href="#fn:inform7" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;. But of course, when I attempt to move "left", I find no destination &lt;sup id="fnref:youcant"&gt;&lt;a class="footnote-ref" href="#fn:youcant" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;. I can pop an application from anywhere on the list, but I can only prepend new applications to the list &lt;sup id="fnref:ignorant"&gt;&lt;a class="footnote-ref" href="#fn:ignorant" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Apple needs to move away from its linear thinking and enter the second dimension.&lt;/p&gt;
&lt;p&gt;What if I could drag apps in the switcher on top of each other to make a new stack, not unlike the option on the OS X launch bar? Throughout this stack, position is maintained regardless of which application is in use/was last used. I can always move &lt;strong&gt;up&lt;/strong&gt; from Chrome to ByWord, and &lt;strong&gt;down&lt;/strong&gt; to Good Reader, for example, if I was writing a report. Apple might call this a Stack, mirroring the term in OSX, but I would prefer this to be called a &lt;em&gt;Flow&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The goal of this feature is to organize a &lt;em&gt;Flow&lt;/em&gt; for a particular task that requires using multiple apps. One feature might be saving a "Flow", this way each time I want to write a blog post, I tap the same home screen button and the same four apps in the same order launch in a &lt;em&gt;Flow&lt;/em&gt;, ready for easy switching using the familiar four-finger swipe gesture up and down. I no longer have to worry about the sequence I have recently accessed applications which is confusing and requires me to look at the app switcher draw or needlessly and repeatedly swipe through applications. I never have to worry about lingering too long on one application while swiping through and switching to that app, changing my position to the origin of the list and starting over again. &lt;/p&gt;
&lt;p&gt;For all the calls for complex inter-app communication or having multiple apps active on the screen at the same time, it seems a simple interface change to application switching could complete change the way we multitask on iOS.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:viticci"&gt;
&lt;p&gt;And Federico Viticci has either shown us the light or gone completely mad.&amp;#160;&lt;a class="footnote-backref" href="#fnref:viticci" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:next"&gt;
&lt;p&gt;For now, lets assume the right application is next in the stack. I'll get to that issue with my second change.&amp;#160;&lt;a class="footnote-backref" href="#fnref:next" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:inform7"&gt;
&lt;p&gt;&lt;code&gt;You are in a green room. &amp;gt; Go east. You are in a red room. &amp;gt; Go west. You are in a green room.&lt;/code&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:inform7" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:youcant"&gt;
&lt;p&gt;&lt;code&gt;You can't go that way.&lt;/code&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:youcant" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:ignorant"&gt;
&lt;p&gt;I don't know enough about data structures yet to name what's going on here. I am tempted to think that the challenge is they have presented a list to users, with a decidedly horizontal metaphor, when they actually have created something more akin to a stack, with a decidedly vertical metaphor. But a stack isn't quite the right way to understand the app switcher. You can "pop" an app from any arbitrary position on the app switcher, but funny enough can only push a new app on to the top of the switcher.&amp;#160;&lt;a class="footnote-backref" href="#fnref:ignorant" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Cleaning URLs with TextExpander</title><link href="http://blog.jsonbecker.com/2013/05/cleaning-urls-with-textexpander.html" rel="alternate"></link><updated>2013-05-30T00:00:00-04:00</updated><author><name>Jason P. Becker</name></author><id>tag:blog.jsonbecker.com,2013-05-30:2013/05/cleaning-urls-with-textexpander.html</id><summary type="html">&lt;p&gt;One thing I really dislike about Google Reader is it replaces the links to posts in my RSS feed. My &lt;a href="http://pinboard.in/u:jasonpbecker"&gt;Pinboard account&lt;/a&gt; is littered with links that start with &lt;code&gt;http://feedproxy.google.com&lt;/code&gt;. I am quite concerned that with the demise of &lt;a href="http://googlereader.blogspot.com/2013/03/powering-down-google-reader.html"&gt;Google Reader&lt;/a&gt; on July 1, 2013, these redirects will no longer work.&lt;/p&gt;
&lt;p&gt;It's not just Google that obscures the actually address of links on the internet. The popularity of using link shortening services, both to save characters on Twitter and to collect analytics, has proliferated the &lt;em&gt;Internet of Redirects&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Worse still, after I am done cutting through redirects, I often find that the ultimate link include all kinds of extraneous attributes, most especially a barrage of &lt;code&gt;utm_*&lt;/code&gt; campaign tracking.&lt;/p&gt;
&lt;p&gt;Now, I understand why all of this is happening and the importance of the services and analytics this link cruft provides. I am quite happy to click on shortened links, move through all the redirects, and let sites know just how I found them. But quite often, like when using a bookmarking service or writing a blog post, I just want the simple, plain text URL that gets me directly to the permanent home of the content.&lt;/p&gt;
&lt;p&gt;One part of my workflow to deal with link cruft is a TextExpander snippet I call &lt;code&gt;cleanURL&lt;/code&gt;. It triggers a simple Python script that grabs the URL in my clipboard, traces through the redirects to the final destination, then strips links of campaign tracking attributes, and ultimately pastes a new URL that is much "cleaner".&lt;/p&gt;
&lt;p&gt;Below I have provided the script. I hope it is useful to some other folks, and I would love some recommendations for additional "cleaning" that could be performed.&lt;/p&gt;
&lt;p&gt;My next task is expanding this script to work with &lt;a href="http://pinboard.in"&gt;Pinboard&lt;/a&gt; so that I can clean up all my links before the end of the month when Google Reader goes belly up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;check_output&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pbpaste&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Go through the redirects to get the destination URL&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Look for utm attributes&lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;[?&amp;amp;#]utm_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Because I&amp;#39;m not smart and trigger this with&lt;/span&gt;
&lt;span class="c"&gt;# already clean URLs&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;cleanURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;())[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;cleanURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;cleanURL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry></feed>